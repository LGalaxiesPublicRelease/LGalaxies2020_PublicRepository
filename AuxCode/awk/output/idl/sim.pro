;
; This IDL file, together with the LGalaxy.pro file generated by AWK
; allows one to read a file and plot histograms of all of its parameters
; After calling 
;   .run sim.pro
; the plotting can be performed by calling 
;   plotLGs, '/path/to/output/SA_galtree_123'

; test calls:
; lgs=readLGs('/galformod/data/L-Galaxies/Guo2010a/mMR/SA_galtree_7')
; plotLGs,'/galformod/data/L-Galaxies/Guo2010a/mMR/SA_galtree_7'

;=========================================================================
pro plothist, y, name, t
; plot a histogram of incoming 
;=========================================================================
;
  nbins=100
  x=1.0*y   ; to avoid problems with histogramming integers, in particular Type
  xmin=min(x)
  xmax=max(x)

; do logarithmic binning maybe
  dolog=0L
  if(xmin GE 0) and (t ne 'L')  then begin 
   	xmin=alog10(min(x(where(x GT 0))))
   	xmax=alog10(max(x(where(x GT 0))))
   	bins=findgen(nbins)
   	bin=(xmax-xmin)/(nbins-1)
   	bins= 10^(xmin+bin*bins)
   	dolog=1
  endif else begin
    bins=findgen(nbins)
    bin=(xmax-xmin)/(nbins-1)
    bins=xmin+bin*bins
  endelse
  x_md = value_locate(bins, x)
  hist = float(histogram(x_md, min = -1, reverse_indices = ri))
  
;  hist=float(histo_bins(x,bins))

  zero=0.7
  hist(where(hist eq 0))=zero
  print,xmin,xmax,"  " ,t,dolog

  xmin=min(bins)
  xmax=max(bins)
  ymin=min(hist)
  ymax=max(hist)*1.4
  if(dolog eq 1) then begin
    plot, bins, hist, /xlog,psym=10,xtitle=name,ytitle='counts',/ylog $
    ,xrange = [xmin, xmax],yrange = [ymin, ymax],YSTYLE = 1
 endif else begin
    plot, bins, hist,psym=10,xtitle=name,ytitle='counts',/ylog $
    ,xrange = [xmin, xmax],yrange = [ymin, ymax],YSTYLE = 1
 endelse
    oplot, bins, zero+0*fltarr(n_elements(bins))
end

;=====================
; test whether incoming array has valid floating point values for storing in SQLServer 
;=====================
function testFloat, x 
  sel=where((abs(x) gt 0 and abs(x) le 1.18e-38) or finite(x,/NAN), number)
  return, sel
end





;=========================================================================
; import generated LGalaxy.pro file
@LGalaxy_struct
@LGalaxy_plot
@LGalaxy_testfloats
@LGalaxy_zerofloats
;=========================================================================

;=========================================================================
   FUNCTION readLGs, FileName
;=========================================================================
; read all galaxies from the specified file
;=========================================================================
   close, 1
   openr, 1, FileName
   one = 0L & readu,1,one
   if(not one eq 1) then begin
       close, 1
       openr, 1,  FileName, /swap_endian
       one = 0L & readu,1,one
       if(not one eq 1) then begin
              print, 'error in format of file '+ FileName
              return, 0
       endif
    endif
    nbytes = 0L & readu, 1, nbytes
    ngals=0L & readu, 1, ngals
    nskip=nbytes/4-3

   ib=fltarr(nskip)
   readu,1,ib

   print, " Total number of galaxies = ", ngals
   print, " Total number of bytes per galaxy = ", nbytes

   LG={LGalaxy}
   G = replicate(LG, ngals)
   readu, 1, G

   close, 1
   return, G
end

;--------------------------------
PRO plotLGs, FileName

  LGs=readLGs(FileName)
  
  psfile=FILE_BASENAME(FileName)+'_testplots.ps'
  print, 'printing to ',psfile
  ; Open ps file for all plots
   !p.charsize = 0.9
   !p.charthick = 2
   !p.thick = 2
   !x.thick = 2
   !y.thick = 2

   !p.multi = 0
   set_plot, 'PS'
   device, filename = psfile, xsize = 15, ysize = 15, /color, $
           xoffset=1, $
	   yoffset=5
   loadct, 6


  LGalaxy_hist, LGs

device, /close_file
end


;---------------------------------------------------------------
; num is number of galaxies that should be examined per step 
;------------------------------------------------------------
PRO testLGs, FileName, num

   close, 1
   openr, 1, FileName
   one = 0L & readu,1,one
   if(not one eq 1) then begin
       close, 1
       openr, 1,  FileName, /swap_endian
       one = 0L & readu,1,one
       if(not one eq 1) then begin
              print, 'error in format of file '+ FileName
              return
       endif
    endif
    nbytes = 0L & readu, 1, nbytes
    ngals=0L & readu, 1, ngals
    nskip=nbytes/4-3

   ib=fltarr(nskip)
   readu,1,ib

   print, " Total number of galaxies = ", ngals
   print, " Total number of bytes per galaxy = ", nbytes

   LG={LGalaxy}

   count=0
   badranges=[]
   while(1) do begin
	   num=min([num,ngals-count])
	   if(num le 0) then break
	   LGs = replicate(LG, num)
	   readu, 1, LGs
	   br = LGalaxy_testfloats(LGs, count)
	   if(size(br,/dimensions) gt 0) then begin
	       badranges=[badranges,count+br]
	       print,LGs[br]
	   endif
	   count=count+num
   endwhile

   close, 1
   

end

PRO rewriteLGs, FileName, OutFile, num

   close, 2
   close, 1
   openr, 1, FileName
   openw, 2, OutFile
   
   one = 0L & readu,1,one
   if(not one eq 1) then begin
       close, 1
       openr, 1,  FileName, /swap_endian
       one = 0L & readu,1,one
       if(not one eq 1) then begin
              print, 'error in format of file '+ FileName
              return
       endif
    endif
    nbytes = 0L & readu, 1, nbytes
    ngals=0L & readu, 1, ngals
    nskip=nbytes/4-3

   ib=fltarr(nskip)
   readu,1,ib


   writeu, 2, one
   writeu, 2, nbytes
   writeu, 2, ngals
   writeu, 2, ib

   print, " Total number of galaxies = ", ngals
   print, " Total number of bytes per galaxy = ", nbytes

   LG={LGalaxy}

   count=0
   while(1) do begin
	   num=min([num,ngals-count])
	   if(num le 0) then break
	   LGs = replicate(LG, num)
	   readu, 1, LGs
	   LGalaxy_zerofloats, LGs
       writeu, 2, LGs
       count=count+num
   endwhile

   close, 1
   close, 2   

end

